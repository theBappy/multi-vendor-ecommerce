generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  file_id    String
  url        String
  userId     String?   @unique @db.ObjectId
  shopId     String?   @unique @db.ObjectId
  users      users?    @relation(fields: [userId], references: [id])
  shops      shops?    @relation(fields: [shopId], references: [id])
  products   products? @relation(fields: [productsId], references: [id])
  productsId String?   @db.ObjectId
}

model users {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String          @unique
  password       String?
  following      String[]
  followingShops followers[]
  avatar         images?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  reviews        shopReviews[]
  userAnalytics  userAnalytics[]
  orders         orders[]
}

model shopReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  rating    Float
  reviews   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopsId   String?  @db.ObjectId
  shops     shops?   @relation(fields: [shopsId], references: [id])
}

model shops {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  bio           String?
  category      String
  avatar        images?
  coverBanner   String?
  address       String
  opening_hours String?
  website       String
  socialLinks   Json[]
  ratings       Float         @default(0)
  reviews       shopReviews[]
  sellerId      String        @unique @db.ObjectId
  sellers       sellers       @relation(fields: [sellerId], references: [id])
  followers     followers[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      products[]
  orders        orders[]
}

model sellers {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  phone_number String
  country      String
  password     String
  stripeId     String?
  shop         shops?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model followers {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  shopId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  shop      shops    @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
}

model site_config {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
}

model discount_codes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum productStatus {
  Active
  Pending
  Draft
}

model products {
  id                    String             @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  slug                  String             @unique
  category              String
  subCategory           String
  short_description     String
  detailed_description  String
  images                images[]
  video_url             String?
  tags                  String[]
  brand                 String?
  colors                String[]
  sizes                 String[]
  starting_date         DateTime?
  ending_date           DateTime?
  stock                 Int
  sale_price            Float
  regular_price         Float
  ratings               Float              @default(5)
  warranty              String?
  totalSales            Int                @default(0)
  custom_specifications Json?
  custom_properties     Json?
  isDeleted             Boolean?           @default(false)
  cashOnDelivery        String?
  discount_codes        String[]           @db.ObjectId
  status                productStatus      @default(Active)
  deletedAt             DateTime?
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  shopId                String             @db.ObjectId
  shop                  shops              @relation(fields: [shopId], references: [id])
  productAnalytics      productAnalytics[]
}

model userAnalytics {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  user        users     @relation(fields: [userId], references: [id])
  loginCount  Int       @default(0)
  lastLogin   DateTime?
  totalOrders Int       @default(0)
  lastVisited DateTime?
  actions     Json?
  country     String?
  city        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model productAnalytics {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  productId    String    @unique @db.ObjectId
  product      products  @relation(fields: [productId], references: [id])
  shopId       String    @db.ObjectId
  views        Int       @default(0)
  cartAdds     Int       @default(0)
  addToCart    Int       @default(0)
  purchases    Int       @default(0)
  wishlistAdds Int       @default(0)
  lastViewedAt DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model orders {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  shopId    String   @db.ObjectId
  shop      shops    @relation(fields: [shopId], references: [id])
  total     Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
